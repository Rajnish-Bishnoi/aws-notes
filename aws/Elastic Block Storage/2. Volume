# üì¶ Amazon EBS (Elastic Block Store)

Amazon EBS is a block-level storage service designed for use with Amazon EC2 instances.

---

## üß† What is EBS?

> "EBS is like attaching a virtual hard disk to your EC2 instance."

EBS provides **persistent**, **durable**, and **high-performance** block storage.

---

### üîë Key Features

* **Durable & Fault-Tolerant**: Data is replicated within the same AZ.
* **Persistent**: Data remains intact even if the EC2 instance is stopped or terminated.
* **AZ Specific**: Both volume and instance must be in the same Availability Zone.
* **Multi-Attach (Limited)**: Supported by some volume types and instance types.
* **Encryption**: Supported natively at rest and in-transit.
* **Resizable**: You can increase size, change volume type, or adjust IOPS.

---

## üñ•Ô∏è EBS Volumes - Basics

| Feature    | Description                                                      |
| ---------- | ---------------------------------------------------------------- |
| Type       | Block-level storage                                              |
| AZ Scoped  | Cannot attach across different Availability Zones                |
| Usage      | Boot volumes, storing app data, database storage                 |
| Attachment | One or more EBS volumes can be attached to a single EC2 instance |
| Detachment | Can be detached and re-attached to another EC2 instance          |
| Resize     | Only supports increase in size                                   |
| Encryption | Supports encryption (AES-256)                                    |

---

### üõ†Ô∏è Mounting EBS Volume - Step by Step (Linux)

#### 1Ô∏è‚É£ Attach Volume from AWS Console

* EC2 ‚Üí Volumes ‚Üí Select Volume ‚Üí Actions ‚Üí Attach to instance

#### 2Ô∏è‚É£ SSH into EC2

```bash
ssh -i mykey.pem ec2-user@<public-ip>
```

#### 3Ô∏è‚É£ View Attached Disk

```bash
lsblk
```

#### 4Ô∏è‚É£ Create Filesystem

```bash
sudo mkfs -t ext4 /dev/xvdf
```

#### 5Ô∏è‚É£ Create Mount Directory

```bash
sudo mkdir /mydata
```

#### 6Ô∏è‚É£ Mount the Volume

```bash
sudo mount /dev/xvdf /mydata
```

#### 7Ô∏è‚É£ Make Mount Permanent (Optional)

```bash
echo "/dev/xvdf /mydata ext4 defaults,nofail 0 2" | sudo tee -a /etc/fstab
```

---

### ‚ùå Unmount & Detach EBS Volume (Linux)

#### Unmount the Volume

```bash
sudo umount /mydata
```

#### Detach from AWS Console

* Go to EC2 Dashboard ‚Üí Volumes ‚Üí Actions ‚Üí Detach Volume

---

### üß† Mind Map Diagram (Text Representation)

```
EBS
‚îÇ
‚îú‚îÄ‚îÄ Types
‚îÇ   ‚îú‚îÄ‚îÄ General Purpose SSD (gp2/gp3)
‚îÇ   ‚îú‚îÄ‚îÄ Provisioned IOPS SSD (io1/io2)
‚îÇ   ‚îú‚îÄ‚îÄ Throughput Optimized HDD (st1)
‚îÇ   ‚îî‚îÄ‚îÄ Cold HDD (sc1)
‚îÇ
‚îú‚îÄ‚îÄ Features
‚îÇ   ‚îú‚îÄ‚îÄ Durable
‚îÇ   ‚îú‚îÄ‚îÄ AZ Specific
‚îÇ   ‚îú‚îÄ‚îÄ Persistent
‚îÇ   ‚îú‚îÄ‚îÄ Resizable
‚îÇ   ‚îî‚îÄ‚îÄ Encrypted
‚îÇ
‚îú‚îÄ‚îÄ Usage
‚îÇ   ‚îú‚îÄ‚îÄ Boot Volumes
‚îÇ   ‚îú‚îÄ‚îÄ App Data
‚îÇ   ‚îî‚îÄ‚îÄ Databases
‚îÇ
‚îî‚îÄ‚îÄ Operations
    ‚îú‚îÄ‚îÄ Attach
    ‚îú‚îÄ‚îÄ Format
    ‚îú‚îÄ‚îÄ Mount
    ‚îú‚îÄ‚îÄ Unmount
    ‚îî‚îÄ‚îÄ Detach
```

---

# üì∏ Amazon EBS Snapshots (Backup & Restore)

> Snapshots are **incremental, point-in-time backups** of your EBS volumes stored in **Amazon S3**.

---

## üîé Key Concepts

* Snapshots are **incremental** (only changed data saved).
* Stored in **Amazon S3**, but not directly visible in your bucket.
* Can **restore volumes** from snapshots in any AZ or region.
* Used to create **AMIs (Amazon Machine Images)**.
* **Copyable** across regions for disaster recovery.

---

### üß∞ Use Cases

| Use Case           | Description                                |
| ------------------ | ------------------------------------------ |
| Backup             | Create manual or automated backups         |
| Volume Recovery    | Restore volume to previous state           |
| Region Replication | Copy snapshot across regions               |
| AMI Creation       | Snapshots form the root EBS volume for AMI |

---

### üß± Snapshot Lifecycle Diagram (Text)

```
+---------------------+
|  EC2 with EBS Volume|
+---------------------+
         |
         | Take Snapshot
         v
+-----------------------+
|    EBS Snapshot       |
| (stored in S3 backend)|
+-----------------------+
         |
         | Create New Volume from Snapshot
         v
+---------------------+
|  New EBS Volume     |
+---------------------+
         |
         | Attach to EC2
         v
+---------------------+
|    EC2 Instance     |
+---------------------+
```

---

### üíª AWS CLI Commands for Snapshots

#### üì∏ Create Snapshot

```bash
aws ec2 create-snapshot \
    --volume-id vol-0abcd1234efgh5678 \
    --description "My EBS Volume Backup"
```

#### üîç Describe Snapshots

```bash
aws ec2 describe-snapshots \
    --owner-ids self
```

#### üóëÔ∏è Delete Snapshot

```bash
aws ec2 delete-snapshot \
    --snapshot-id snap-0123456789abcdef0
```

#### üì¶ Create EBS Volume from Snapshot

```bash
aws ec2 create-volume \
    --availability-zone us-east-1a \
    --snapshot-id snap-0123456789abcdef0 \
    --volume-type gp2
```

---

## üîÑ Automate Snapshots with Lifecycle Manager

1. Go to EC2 Console ‚Üí Lifecycle Manager
2. Click "Create Lifecycle Policy"
3. Choose resource type = Volume
4. Add tags to match EBS volumes
5. Set snapshot frequency (e.g., every 12 hours)
6. Define retention (e.g., keep last 5 snapshots)
7. Review and create

---

### üßπ Snapshot Best Practices

* Use **tags** to organize and manage snapshots.
* Enable **encryption** for sensitive data.
* Regularly **delete outdated** snapshots.
* Use **Lifecycle Manager** to schedule backups.
* Periodically **test restore** to verify snapshots work.

---

Would you like next: ‚û§ AMI Details ‚û§ Volume Types Chart ‚û§ Lifecycle Manager Demo?
